package com.github.jk1.ytplugin.timeTracker;

import com.github.jk1.ytplugin.ComponentAware;
import com.github.jk1.ytplugin.tasks.YouTrackServer;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class AllSavedTimerItemsDialog extends DialogWrapper {
    private JPanel contentPane;
    private JTable table1;
    private JCheckBox selectAllCheckBox;
    private JPanel panel1;
    private JScrollPane scrollPane1;

    PostAction postAction = new PostAction();


    @NotNull
    private final Project project;
    private final YouTrackServer repo;

    public AllSavedTimerItemsDialog(@NotNull Project project, @NotNull YouTrackServer repo) {
        super(project, true);
        this.project = project;
        this.repo = repo;
        setTitle("Saved Time Tracking Items");
        $$$setupUI$$$();
        init();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBorder(BorderFactory.createTitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.putClientProperty("html.disable", Boolean.TRUE);
        contentPane.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, new Dimension(300, 300), null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        selectAllCheckBox = new JCheckBox();
        selectAllCheckBox.setSelected(true);
        selectAllCheckBox.setText("Select all");
        contentPane.add(selectAllCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @Override
    protected @Nullable JComponent createCenterPanel() {
        return contentPane;
    }

    @Override
    protected Action @NotNull [] createActions() {
        return new Action[]{postAction, getCancelAction()};
    }

    private void createUIComponents() {
        SpentTimePerTaskStorage storage = ComponentAware.Companion.of(project).getSpentTimePerTaskStorage();
        scrollPane1 = createTable(storage);
    }

    private JScrollPane createTable(SpentTimePerTaskStorage storage) {

        ConcurrentHashMap<String, Long> timerItems = storage.getAllStoredItems();

        // form data structure
        Object[][] data = new Object[timerItems.size()][3];
        int i = 0;
        for (Map.Entry<String, Long> entry : timerItems.entrySet()) {
            String id = entry.getKey();
            String time = TimeTracker.Companion.formatTimePeriod(entry.getValue());

            data[i][0] = true;
            data[i][1] = id;
            data[i][2] = time + " min";

            i++;
        }

        Object[] columnsHeaders = new String[]{"Selected", "Issue", "Saved time"};

        DefaultTableModel model = new DefaultTableModel(data, columnsHeaders) {
            @Override
            public Class getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
        };
        JTable table = new JBTable(model);
        return new JBScrollPane(table);

    }

    protected class PostAction extends DialogWrapperAction {
        protected PostAction() {
            super("Post to YouTrack");
        }

        @Override
        protected void doAction(ActionEvent e) {
            new TimeTrackerConnector().postSavedTimeToServer(repo, project);
            close(0);
        }
    }
}

